def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

// Í∏∞Î≥∏ pipeline Î¨∏Î≤ï ÏÇ¨Ïö© (Îçî ÏïàÏ†ïÏ†Å)
pipeline {
    agent {
        kubernetes {
            label "${PIPELINE_ID}"
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: worker
spec:
  serviceAccountName: jenkins
  containers:
  - name: gradle
    image: gradle:jdk17
    command:
    - sleep
    args:
    - 99d
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    env:
    - name: GRADLE_OPTS
      value: "-Dorg.gradle.daemon=false"
  - name: podman
    image: mgoltzsche/podman:latest
    command:
    - sleep
    args:
    - 99d
    securityContext:
      privileged: true
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "300m"
  - name: git-client
    image: alpine/git:latest
    command:
    - sleep
    args:
    - 99d
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
"""
        }
    }
    
    environment {
        IMAGE_TAG = getImageTag()
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "üöÄ Starting pipeline execution"
                    echo "Build Number: ${env.BUILD_NUMBER}"
                    echo "Pipeline ID: ${PIPELINE_ID}"
                    echo "Image Tag: ${env.IMAGE_TAG}"
                    
                    // Kubernetes ÌôòÍ≤Ω ÌôïÏù∏
                    sh '''
                        echo "Checking Kubernetes environment..."
                        echo "Node name: ${NODE_NAME}"
                        echo "Pod name: ${HOSTNAME}"
                        kubectl version --client || echo "kubectl not available"
                    '''
                }
            }
        }
        
        stage('Get Source') {
            steps {
                script {
                    echo "üì• Checking out source code..."
                    checkout scm
                    
                    echo "Source code checked out successfully"
                    sh 'ls -la'
                    
                    // Properties ÌååÏùº ÌôïÏù∏ Î∞è Î°úÎìú
                    if (fileExists('deployment/deploy_env_vars')) {
                        echo "‚úÖ Found deploy_env_vars file"
                        env.PROPS_LOADED = 'true'
                        script {
                            def props = readProperties file: 'deployment/deploy_env_vars'
                            env.REGISTRY = props.registry ?: 'default-registry'
                            env.IMAGE_ORG = props.image_org ?: 'default-org'
                            env.TEAM_ID = props.teamid ?: 'default-team'
                            echo "Properties loaded: registry=${env.REGISTRY}, image_org=${env.IMAGE_ORG}, teamid=${env.TEAM_ID}"
                        }
                    } else {
                        echo "‚ùå deploy_env_vars file not found"
                        sh 'find . -name "*env*" -type f || echo "No env files found"'
                        error "Required deployment configuration file not found"
                    }
                }
            }
        }
        
        stage('Build Applications') {
            steps {
                container('gradle') {
                    script {
                        echo "üî® Building applications..."
                        
                        sh '''
                            echo "Gradle environment check:"
                            gradle --version
                            echo "Java version:"
                            java -version
                            echo "Current directory:"
                            pwd && ls -la
                        '''
                        
                        // Gradle wrapper Ïã§Ìñâ Í∂åÌïú ÏÑ§Ï†ï
                        if (fileExists('gradlew')) {
                            sh 'chmod +x gradlew'
                            echo "‚úÖ Gradle wrapper found and made executable"
                        } else {
                            error "‚ùå Gradle wrapper not found"
                        }
                        
                        try {
                            sh '''
                                echo "Starting clean build..."
                                ./gradlew clean --no-daemon --console=plain
                                
                                echo "Building all services..."
                                ./gradlew :member:build :mysub-infra:build :recommend:build -x test --no-daemon --console=plain
                                
                                echo "‚úÖ Build completed successfully"
                            '''
                        } catch (Exception e) {
                            echo "‚ùå Build failed: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                container('gradle') {
                    script {
                        echo "üß™ Running tests..."
                        
                        try {
                            sh '''
                                echo "Running tests for all services..."
                                ./gradlew test --no-daemon --console=plain || echo "Some tests may have failed"
                                
                                echo "Generating test reports..."
                                ./gradlew jacocoTestReport --no-daemon --console=plain || echo "Report generation completed"
                            '''
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Tests completed with issues: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
        
        stage('Build Images') {
            when {
                expression { env.PROPS_LOADED == 'true' }
            }
            steps {
                container('podman') {
                    script {
                        echo "üê≥ Building and pushing images..."
                        
                        withCredentials([usernamePassword(
                            credentialsId: 'acr-credentials',
                            usernameVariable: 'USERNAME',
                            passwordVariable: 'PASSWORD'
                        )]) {
                            sh '''
                                echo "Logging into container registry..."
                                podman login ${REGISTRY} --username $USERNAME --password $PASSWORD
                            '''
                            
                            def services = ['member', 'mysub', 'recommend']
                            
                            services.each { service ->
                                def buildDir = service == 'mysub' ? 'mysub-infra' : service
                                def jarFile = service == 'mysub' ? 'mysub.jar' : "${service}.jar"
                                
                                sh """
                                    echo "Building image for ${service}..."
                                    
                                    podman build \
                                        --build-arg BUILD_LIB_DIR="${buildDir}/build/libs" \
                                        --build-arg ARTIFACTORY_FILE="${jarFile}" \
                                        -f deployment/container/Dockerfile \
                                        -t ${env.REGISTRY}/${env.IMAGE_ORG}/${service}:${env.IMAGE_TAG} .
                                    
                                    echo "Pushing image for ${service}..."
                                    podman push ${env.REGISTRY}/${env.IMAGE_ORG}/${service}:${env.IMAGE_TAG}
                                    
                                    echo "‚úÖ ${service} image pushed successfully"
                                """
                            }
                        }
                    }
                }
            }
        }
        
        stage('Update Manifest') {
            when {
                expression { env.PROPS_LOADED == 'true' }
            }
            steps {
                container('git-client') {
                    script {
                        echo "üìù Updating manifest repository..."
                        
                        withCredentials([gitUsernamePassword(credentialsId: 'github-credentials-dg0404')]) {
                            sh '''
                                git config --global user.email "jenkins@dg0404.com"
                                git config --global user.name "Jenkins CI DG0404"
                                git config --global --add safe.directory '*'
                                
                                echo "Cloning manifest repository..."
                                git clone https://github.com/sungpowerup/lifesub-manifest.git manifest-repo
                                cd manifest-repo
                                
                                # Í∞Å ÏÑúÎπÑÏä§ ÏóÖÎç∞Ïù¥Ìä∏
                                for service in member mysub recommend; do
                                    deploymentFile="lifesub/${service}/${service}-deployment.yaml"
                                    if [ -f "$deploymentFile" ]; then
                                        echo "Updating $deploymentFile..."
                                        sed -i "s|image: ${REGISTRY}/${IMAGE_ORG}/${service}:.*|image: ${REGISTRY}/${IMAGE_ORG}/${service}:${IMAGE_TAG}|g" $deploymentFile
                                        echo "‚úÖ Updated $service deployment"
                                    else
                                        echo "‚ö†Ô∏è Deployment file not found: $deploymentFile"
                                    fi
                                done
                                
                                # Ïª§Î∞ã Î∞è Ìë∏Ïãú
                                git add .
                                if ! git diff --staged --quiet; then
                                    git commit -m "üöÄ Update backend services to ${IMAGE_TAG} (Build #${BUILD_NUMBER})"
                                    git push origin main
                                    echo "‚úÖ Manifest repository updated successfully"
                                else
                                    echo "‚ÑπÔ∏è No changes to commit"
                                fi
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üèÅ Pipeline completed with result: ${currentBuild.result ?: 'SUCCESS'}"
            }
        }
        failure {
            script {
                echo "‚ùå Pipeline failed - check logs for details"
            }
        }
        success {
            script {
                echo "‚úÖ Pipeline completed successfully"
            }
        }
        unstable {
            script {
                echo "‚ö†Ô∏è Pipeline completed with warnings"
            }
        }
    }
}