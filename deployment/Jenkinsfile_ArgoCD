def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(
            name: 'podman', 
            image: "mgoltzsche/podman", 
            ttyEnabled: true, 
            command: 'cat', 
            privileged: true,
            resourceRequestCpu: '200m',
            resourceRequestMemory: '512Mi',
            resourceLimitCpu: '1000m',
            resourceLimitMemory: '1Gi'
        ),
        containerTemplate(
            name: 'gradle',
            image: 'gradle:jdk17',
            ttyEnabled: true,
            command: 'cat',
            resourceRequestCpu: '500m',
            resourceRequestMemory: '1Gi',
            resourceLimitCpu: '2000m',
            resourceLimitMemory: '2Gi',
            envVars: [
                envVar(key: 'DOCKER_HOST', value: 'unix:///run/podman/podman.sock'),
                envVar(key: 'TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE', value: '/run/podman/podman.sock'),
                envVar(key: 'TESTCONTAINERS_RYUK_DISABLED', value: 'true'),
                envVar(key: 'GRADLE_OPTS', value: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Xmx1g')
            ]
        ),
        containerTemplate(
            name: 'git-client', 
            image: 'alpine/git:latest', 
            command: 'cat', 
            ttyEnabled: true,
            resourceRequestCpu: '100m',
            resourceRequestMemory: '128Mi'
        )
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def services = ['member', 'mysub', 'recommend']
        def manifestRepo = 'https://github.com/sungpowerup/lifesub-manifest.git'
        def manifestDir = 'lifesub-manifest'

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
        }

        stage('Setup Environment') {
            container('podman') {
                sh '''
                    echo "Starting podman system service..."
                    podman system service -t 0 unix:///run/podman/podman.sock &
                    sleep 5
                    echo "Podman service started"
                '''
            }
        }

        stage('Build Applications') {
            container('gradle') {
                def testContainersConfig = '''docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy
docker.host=unix:///run/podman/podman.sock
ryuk.container.privileged=true
testcontainers.reuse.enable=true'''

                sh """
                    echo "Setting up TestContainers configuration..."
                    
                    # TestContainers 설정
                    mkdir -p member/src/test/resources mysub-infra/src/test/resources recommend/src/test/resources
                    echo '${testContainersConfig}' > member/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > mysub-infra/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > recommend/src/test/resources/testcontainers.properties
                    
                    echo "Starting application build..."
                    chmod +x gradlew
                    
                    # 빌드 실행 (테스트 제외)
                    ./gradlew clean :member:build :mysub-infra:build :recommend:build -x test --no-daemon --max-workers=2
                    
                    echo "Build completed successfully"
                """
            }
        }

        stage('Run Tests') {
            container('gradle') {
                sh """
                    echo "Running tests for all services..."
                    
                    # 각 서비스별로 개별 테스트 실행
                    echo "Testing Member service..."
                    ./gradlew :member:test --no-daemon --max-workers=1 || echo "Member tests completed with issues"
                    
                    echo "Testing Recommend service..."
                    ./gradlew :recommend:test --no-daemon --max-workers=1 || echo "Recommend tests completed with issues"
                    
                    echo "Testing MySub service..."
                    ./gradlew :mysub-infra:test --no-daemon --max-workers=1 || echo "MySub tests completed with issues"
                    
                    echo "All tests completed"
                """
            }
        }

        stage('Generate Test Reports') {
            container('gradle') {
                sh """
                    echo "Generating JaCoCo test reports..."
                    
                    # JaCoCo 리포트 생성
                    ./gradlew :member:jacocoTestReport --no-daemon || echo "Member JaCoCo report generation completed"
                    ./gradlew :recommend:jacocoTestReport --no-daemon || echo "Recommend JaCoCo report generation completed"
                    ./gradlew :mysub-infra:jacocoTestReport --no-daemon || echo "MySub JaCoCo report generation completed"
                    
                    echo "Test reports generated successfully"
                """
            }
        }

        stage('SonarQube Analysis') {
            container('gradle') {
                // SonarQube 분석을 각 서비스별로 개별 실행
                withSonarQubeEnv('SonarQube') {
                    script {
                        try {
                            sh """
                                echo "Starting SonarQube analysis for Member service..."
                                ./gradlew :member:sonar \
                                    -Dsonar.projectKey=lifesub-member-${props.teamid} \
                                    -Dsonar.projectName=lifesub-member \
                                    -Dsonar.java.binaries=build/classes/java/main \
                                    -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                                    -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/** \
                                    --no-daemon --max-workers=1
                                
                                echo "Member service SonarQube analysis completed"
                            """
                        } catch (Exception e) {
                            echo "Member SonarQube analysis failed: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                        
                        try {
                            sh """
                                echo "Starting SonarQube analysis for Recommend service..."
                                ./gradlew :recommend:sonar \
                                    -Dsonar.projectKey=lifesub-recommend-${props.teamid} \
                                    -Dsonar.projectName=lifesub-recommend \
                                    -Dsonar.java.binaries=build/classes/java/main \
                                    -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                                    -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/** \
                                    --no-daemon --max-workers=1
                                
                                echo "Recommend service SonarQube analysis completed"
                            """
                        } catch (Exception e) {
                            echo "Recommend SonarQube analysis failed: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                        
                        try {
                            sh """
                                echo "Starting SonarQube analysis for MySub service..."
                                ./gradlew :mysub-infra:sonar \
                                    -Dsonar.projectKey=lifesub-mysub-${props.teamid} \
                                    -Dsonar.projectName=lifesub-mysub \
                                    -Dsonar.java.binaries=build/classes/java/main \
                                    -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                                    -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/** \
                                    --no-daemon --max-workers=1
                                
                                echo "MySub service SonarQube analysis completed"
                            """
                        } catch (Exception e) {
                            echo "MySub SonarQube analysis failed: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            timeout(time: 15, unit: 'MINUTES') {
                script {
                    try {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            echo "Quality gate failed: ${qg.status}"
                            currentBuild.result = 'UNSTABLE'
                        } else {
                            echo "Quality gate passed successfully"
                        }
                    } catch (Exception e) {
                        echo "Quality gate check failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Build & Push Images') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh """
                        echo "Logging into container registry..."
                        podman login ${props.registry} --username \$USERNAME --password \$PASSWORD
                    """

                    services.each { service ->
                        def buildDir = service == 'mysub' ? 'mysub-infra' : service
                        def jarFile = service == 'mysub' ? 'mysub.jar' : "${service}.jar"

                        sh """
                            echo "Building and pushing image for service: ${service}"
                            
                            # 이미지 빌드
                            podman build \
                                --build-arg BUILD_LIB_DIR="${buildDir}/build/libs" \
                                --build-arg ARTIFACTORY_FILE="${jarFile}" \
                                -f deployment/container/Dockerfile \
                                -t ${props.registry}/${props.image_org}/${service}:${imageTag} .

                            # 이미지 푸시
                            podman push ${props.registry}/${props.image_org}/${service}:${imageTag}
                            
                            echo "✅ Successfully pushed: ${props.registry}/${props.image_org}/${service}:${imageTag}"
                        """
                    }
                }
            }
        }

        stage('Update Manifest Repository') {
            container('git-client') {
                withCredentials([gitUsernamePassword(credentialsId: 'github-credentials-dg0404')]) {
                    sh """
                        echo "Updating manifest repository for ArgoCD..."
                        
                        # Git 설정
                        git config --global user.email "jenkins@dg0404.com"
                        git config --global user.name "Jenkins CI DG0404"
                        git config --global --add safe.directory '*'
                        
                        # Manifest repository 클론
                        git clone ${manifestRepo} ${manifestDir}
                        cd ${manifestDir}
                        
                        echo "Repository cloned successfully"
                        git status
                        
                        # 각 서비스 deployment 업데이트
                        for service in ${services.join(' ')}; do
                            deploymentFile="lifesub/\${service}/\${service}-deployment.yaml"
                            echo "Processing: \$deploymentFile"
                            
                            if [ -f "\$deploymentFile" ]; then
                                echo "✅ Found deployment file: \$deploymentFile"
                                
                                # 이미지 태그 업데이트
                                sed -i "s|image: ${props.registry}/${props.image_org}/\${service}:.*|image: ${props.registry}/${props.image_org}/\${service}:${imageTag}|g" \$deploymentFile
                                
                                echo "Updated \$deploymentFile with tag: ${imageTag}"
                            else
                                echo "⚠️  Warning: \$deploymentFile not found"
                            fi
                        done
                        
                        # 변경사항 커밋 및 푸시
                        git add .
                        if git diff --staged --quiet; then
                            echo "No changes to commit"
                        else
                            git commit -m "🚀 Update backend services to ${imageTag} (Build #${env.BUILD_NUMBER})"
                            git push origin main
                            echo "✅ Manifest repository updated successfully"
                            echo "🎯 ArgoCD will deploy these changes automatically"
                        fi
                    """
                }
            }
        }
    }
}