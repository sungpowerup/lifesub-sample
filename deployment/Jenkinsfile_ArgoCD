def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'gradle',
                        image: 'gradle:jdk17',
                        ttyEnabled: true,
                        command: 'cat',
                        envVars: [
                            envVar(key: 'DOCKER_HOST', value: 'unix:///run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE', value: '/run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_RYUK_DISABLED', value: 'true')
                        ]),
        containerTemplate(
            name: 'git-client', 
            image: 'alpine/git:latest', 
            command: 'cat', 
            ttyEnabled: true
        )
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def services = ['member', 'mysub', 'recommend']
        def manifestRepo = 'https://github.com/sungpowerup/lifesub-manifest.git'
        def manifestDir = 'lifesub-manifest'

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
        }

        stage('Build Applications & SonarQube Analysis') {
            container('podman') {
                sh 'podman system service -t 0 unix:///run/podman/podman.sock & sleep 2'
            }

            container('gradle') {
                def testContainersConfig = '''docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy
docker.host=unix:///run/podman/podman.sock
ryuk.container.privileged=true
testcontainers.reuse.enable=true'''

                sh """
                    # TestContainers 설정
                    mkdir -p member/src/test/resources mysub-infra/src/test/resources recommend/src/test/resources
                    echo '${testContainersConfig}' > member/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > mysub-infra/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > recommend/src/test/resources/testcontainers.properties
                """

                // 빌드 및 SonarQube 분석
                withSonarQubeEnv('SonarQube') {
                    sh """
                        chmod +x gradlew

                        # 빌드 실행
                        ./gradlew :member:build :mysub-infra:build :recommend:build -x test

                        # Member 서비스
                        ./gradlew :member:test :member:jacocoTestReport :member:sonar \
                            -Dsonar.projectKey=lifesub-member-${props.teamid} \
                            -Dsonar.projectName=lifesub-member \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Recommend 서비스
                        ./gradlew :recommend:test :recommend:jacocoTestReport :recommend:sonar \
                            -Dsonar.projectKey=lifesub-recommend-${props.teamid} \
                            -Dsonar.projectName=lifesub-recommend \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Mysub 서비스 (biz & infra 구조)
                        ./gradlew :mysub-infra:test :mysub-infra:jacocoTestReport :mysub-infra:sonar \
                            -Dsonar.projectKey=lifesub-mysub-${props.teamid} \
                            -Dsonar.projectName=lifesub-mysub \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
                    """
                }
            }
        }

        stage('Quality Gate') {
            timeout(time: 10, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }

        stage('Build & Push Images') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh "podman login ${props.registry} --username \$USERNAME --password \$PASSWORD"

                    services.each { service ->
                        def buildDir = service == 'mysub' ? 'mysub-infra' : service
                        def jarFile = service == 'mysub' ? 'mysub.jar' : "${service}.jar"

                        sh """
                            echo "Building image for service: ${service}"
                            
                            podman build \
                                --build-arg BUILD_LIB_DIR="${buildDir}/build/libs" \
                                --build-arg ARTIFACTORY_FILE="${jarFile}" \
                                -f deployment/container/Dockerfile \
                                -t ${props.registry}/${props.image_org}/${service}:${imageTag} .

                            echo "Pushing image for service: ${service}"
                            podman push ${props.registry}/${props.image_org}/${service}:${imageTag}
                            
                            echo "Successfully pushed: ${props.registry}/${props.image_org}/${service}:${imageTag}"
                        """
                    }
                }
            }
        }

        stage('Update Manifest Repository') {
            container('git-client') {
                withCredentials([gitUsernamePassword(credentialsId: 'github-credentials-dg0404')]) {
                    sh """
                        echo "Updating manifest repository for ArgoCD..."
                        
                        # Git 설정
                        git config --global user.email "jenkins@dg0404.com"
                        git config --global user.name "Jenkins CI DG0404"
                        git config --global --add safe.directory '*'
                        
                        # Manifest repository 클론
                        git clone ${manifestRepo} ${manifestDir}
                        cd ${manifestDir}
                        
                        # 현재 브랜치 확인
                        echo "Current branch and status:"
                        git branch -a
                        git status
                        
                        # 각 서비스 deployment 업데이트
                        for service in ${services.join(' ')}; do
                            deploymentFile="lifesub/\${service}/\${service}-deployment.yaml"
                            echo "Processing deployment file: \$deploymentFile"
                            
                            if [ -f "\$deploymentFile" ]; then
                                echo "Found deployment file: \$deploymentFile"
                                
                                # 현재 이미지 태그 확인
                                echo "Current image configuration:"
                                grep "image:" \$deploymentFile || echo "No image configuration found"
                                
                                # 이미지 태그 업데이트
                                sed -i "s|image: ${props.registry}/${props.image_org}/\${service}:.*|image: ${props.registry}/${props.image_org}/\${service}:${imageTag}|g" \$deploymentFile
                                
                                echo "=== Updated \$deploymentFile ==="
                                cat \$deploymentFile
                                echo "================================"
                            else
                                echo "Warning: \$deploymentFile not found"
                                echo "Available structure:"
                                find lifesub -name "*deployment*.yaml" -type f 2>/dev/null || echo "No deployment files found"
                            fi
                        done
                        
                        # 변경사항 확인
                        echo "Git status after changes:"
                        git status
                        git diff --name-only
                        
                        # 변경사항 커밋 및 푸시
                        git add .
                        if git diff --staged --quiet; then
                            echo "No changes to commit"
                        else
                            echo "Committing changes..."
                            git commit -m "Update backend services image tag to ${imageTag}

Build: ${env.BUILD_NUMBER}
Services: ${services.join(', ')}
Registry: ${props.registry}/${props.image_org}
Tag: ${imageTag}

Updated by Jenkins CI for ArgoCD deployment"
                            
                            echo "Pushing changes to manifest repository..."
                            git push origin main
                            echo "✅ Changes pushed successfully to manifest repository"
                            echo "🚀 ArgoCD will automatically detect and deploy these changes"
                        fi
                    """
                }
            }
        }
    }
}